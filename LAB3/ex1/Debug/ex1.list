
ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad8  08002ad8  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad8  08002ad8  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad8  08002ad8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000050  08002b30  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002b30  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cf5  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b25  00000000  00000000  00028d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ee4  00000000  00000000  0002bbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd07  00000000  00000000  00042acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008222d  00000000  00000000  0004e7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000d0a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa0 	.word	0x08002aa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002aa0 	.word	0x08002aa0

0800014c <isButtonPressed>:
int KeyReg2[NO_OF_BUTTONS] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[NO_OF_BUTTONS] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NO_OF_BUTTONS] =  {100,100,100};

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000006c 	.word	0x2000006c

08000180 <subKeyProcess>:
//
//int isButton1DoubleClickisPressed() {
//
//}

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000006c 	.word	0x2000006c

080001a0 <getKeyInput>:
//nhieu nut nhan, dung mang, o ham HALGPIOReadPin dung them if de phan loai nut, sau do for cho full ham getKeyInput() (xem them tren Internet)
void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
  for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e08b      	b.n	80002c4 <getKeyInput+0x124>
	  KeyReg2[i] = KeyReg1[i];
 80001ac:	4a4a      	ldr	r2, [pc, #296]	; (80002d8 <getKeyInput+0x138>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4949      	ldr	r1, [pc, #292]	; (80002dc <getKeyInput+0x13c>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg0[i];
 80001bc:	4a48      	ldr	r2, [pc, #288]	; (80002e0 <getKeyInput+0x140>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4944      	ldr	r1, [pc, #272]	; (80002d8 <getKeyInput+0x138>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  switch (i) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d020      	beq.n	8000214 <getKeyInput+0x74>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	dc29      	bgt.n	800022c <getKeyInput+0x8c>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d003      	beq.n	80001e6 <getKeyInput+0x46>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d00b      	beq.n	80001fc <getKeyInput+0x5c>
 80001e4:	e022      	b.n	800022c <getKeyInput+0x8c>
	  		case 0:
	  			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON1_Pin) ;
 80001e6:	2180      	movs	r1, #128	; 0x80
 80001e8:	483e      	ldr	r0, [pc, #248]	; (80002e4 <getKeyInput+0x144>)
 80001ea:	f001 fc19 	bl	8001a20 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4619      	mov	r1, r3
 80001f2:	4a3b      	ldr	r2, [pc, #236]	; (80002e0 <getKeyInput+0x140>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			break;
 80001fa:	e017      	b.n	800022c <getKeyInput+0x8c>
	  		case 1:
	  			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON2_Pin) ;
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	4838      	ldr	r0, [pc, #224]	; (80002e4 <getKeyInput+0x144>)
 8000202:	f001 fc0d 	bl	8001a20 <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	4619      	mov	r1, r3
 800020a:	4a35      	ldr	r2, [pc, #212]	; (80002e0 <getKeyInput+0x140>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			break;
 8000212:	e00b      	b.n	800022c <getKeyInput+0x8c>
	  		case 2:
	  			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON3_Pin) ;
 8000214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000218:	4832      	ldr	r0, [pc, #200]	; (80002e4 <getKeyInput+0x144>)
 800021a:	f001 fc01 	bl	8001a20 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	4619      	mov	r1, r3
 8000222:	4a2f      	ldr	r2, [pc, #188]	; (80002e0 <getKeyInput+0x140>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			break;
 800022a:	bf00      	nop
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800022c:	4a2a      	ldr	r2, [pc, #168]	; (80002d8 <getKeyInput+0x138>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	492a      	ldr	r1, [pc, #168]	; (80002e0 <getKeyInput+0x140>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d13e      	bne.n	80002be <getKeyInput+0x11e>
 8000240:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <getKeyInput+0x138>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4924      	ldr	r1, [pc, #144]	; (80002dc <getKeyInput+0x13c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000250:	429a      	cmp	r2, r3
 8000252:	d134      	bne.n	80002be <getKeyInput+0x11e>
	    if (KeyReg2[i] != KeyReg3[i]){
 8000254:	4a21      	ldr	r2, [pc, #132]	; (80002dc <getKeyInput+0x13c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025c:	4922      	ldr	r1, [pc, #136]	; (80002e8 <getKeyInput+0x148>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000264:	429a      	cmp	r2, r3
 8000266:	d016      	beq.n	8000296 <getKeyInput+0xf6>
	      KeyReg3[i] = KeyReg2[i];
 8000268:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <getKeyInput+0x13c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	491d      	ldr	r1, [pc, #116]	; (80002e8 <getKeyInput+0x148>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (KeyReg2[i] == PRESSED_STATE){
 8000278:	4a18      	ldr	r2, [pc, #96]	; (80002dc <getKeyInput+0x13c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d11c      	bne.n	80002be <getKeyInput+0x11e>
	        subKeyProcess(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff7b 	bl	8000180 <subKeyProcess>
	        TimeOutForKeyPress[i] = 100;
 800028a:	4a18      	ldr	r2, [pc, #96]	; (80002ec <getKeyInput+0x14c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2164      	movs	r1, #100	; 0x64
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000294:	e013      	b.n	80002be <getKeyInput+0x11e>
	      }
	    }
	    else {
	        TimeOutForKeyPress[i] --;
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <getKeyInput+0x14c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029e:	1e5a      	subs	r2, r3, #1
 80002a0:	4912      	ldr	r1, [pc, #72]	; (80002ec <getKeyInput+0x14c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        if (TimeOutForKeyPress[i] == 0){
 80002a8:	4a10      	ldr	r2, [pc, #64]	; (80002ec <getKeyInput+0x14c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d104      	bne.n	80002be <getKeyInput+0x11e>
	          KeyReg3[i] = NORMAL_STATE;
 80002b4:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <getKeyInput+0x148>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2101      	movs	r1, #1
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3301      	adds	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	f77f af70 	ble.w	80001ac <getKeyInput+0xc>
	        }
	    }
	  }
  }
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	2000000c 	.word	0x2000000c
 80002dc:	20000018 	.word	0x20000018
 80002e0:	20000000 	.word	0x20000000
 80002e4:	40010800 	.word	0x40010800
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000030 	.word	0x20000030

080002f0 <areButtonsPressed>:

void areButtonsPressed() {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if (isButtonPressed(0)) {
 80002f4:	2000      	movs	r0, #0
 80002f6:	f7ff ff29 	bl	800014c <isButtonPressed>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d018      	beq.n	8000332 <areButtonsPressed+0x42>
		mode = (mode >= 4) ? 1 : mode+1;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <areButtonsPressed+0xb0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b03      	cmp	r3, #3
 8000306:	dc03      	bgt.n	8000310 <areButtonsPressed+0x20>
 8000308:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <areButtonsPressed+0xb0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	e000      	b.n	8000312 <areButtonsPressed+0x22>
 8000310:	2301      	movs	r3, #1
 8000312:	4a23      	ldr	r2, [pc, #140]	; (80003a0 <areButtonsPressed+0xb0>)
 8000314:	6013      	str	r3, [r2, #0]
		value = 1;
 8000316:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <areButtonsPressed+0xb4>)
 8000318:	2201      	movs	r2, #1
 800031a:	601a      	str	r2, [r3, #0]
		display7SEGM(mode);
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <areButtonsPressed+0xb0>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fcef 	bl	8000d04 <display7SEGM>
		display7SEG(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f000 f994 	bl	8000654 <display7SEG>
		display7SEG1(0);
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fb1f 	bl	8000970 <display7SEG1>
	}
	if (isButtonPressed(1)) {
 8000332:	2001      	movs	r0, #1
 8000334:	f7ff ff0a 	bl	800014c <isButtonPressed>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d025      	beq.n	800038a <areButtonsPressed+0x9a>
		value = (value >= 99) ? 1 : value+1;
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <areButtonsPressed+0xb4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b62      	cmp	r3, #98	; 0x62
 8000344:	dc03      	bgt.n	800034e <areButtonsPressed+0x5e>
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <areButtonsPressed+0xb4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3301      	adds	r3, #1
 800034c:	e000      	b.n	8000350 <areButtonsPressed+0x60>
 800034e:	2301      	movs	r3, #1
 8000350:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <areButtonsPressed+0xb4>)
 8000352:	6013      	str	r3, [r2, #0]
		display7SEG(value%10);
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <areButtonsPressed+0xb4>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <areButtonsPressed+0xb8>)
 800035a:	fb83 1302 	smull	r1, r3, r3, r2
 800035e:	1099      	asrs	r1, r3, #2
 8000360:	17d3      	asrs	r3, r2, #31
 8000362:	1ac9      	subs	r1, r1, r3
 8000364:	460b      	mov	r3, r1
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	440b      	add	r3, r1
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	1ad1      	subs	r1, r2, r3
 800036e:	4608      	mov	r0, r1
 8000370:	f000 f970 	bl	8000654 <display7SEG>
		display7SEG1(value/10);
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <areButtonsPressed+0xb4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <areButtonsPressed+0xb8>)
 800037a:	fb82 1203 	smull	r1, r2, r2, r3
 800037e:	1092      	asrs	r2, r2, #2
 8000380:	17db      	asrs	r3, r3, #31
 8000382:	1ad3      	subs	r3, r2, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f000 faf3 	bl	8000970 <display7SEG1>
	}
	if (isButtonPressed(2)) {
 800038a:	2002      	movs	r0, #2
 800038c:	f7ff fede 	bl	800014c <isButtonPressed>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d002      	beq.n	800039c <areButtonsPressed+0xac>
		status = MANUAL_INIT;
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <areButtonsPressed+0xbc>)
 8000398:	220a      	movs	r2, #10
 800039a:	601a      	str	r2, [r3, #0]
	}
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000007c 	.word	0x2000007c
 80003a4:	2000003c 	.word	0x2000003c
 80003a8:	66666667 	.word	0x66666667
 80003ac:	20000078 	.word	0x20000078

080003b0 <fsm_automatic_run>:
 *  Created on: Nov 2, 2022
 *      Author: HP
 */
#include"fsm_automatic.h"

void fsm_automatic_run() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	switch(status) {
 80003b4:	4b4b      	ldr	r3, [pc, #300]	; (80004e4 <fsm_automatic_run+0x134>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	f200 808e 	bhi.w	80004dc <fsm_automatic_run+0x12c>
 80003c0:	a201      	add	r2, pc, #4	; (adr r2, 80003c8 <fsm_automatic_run+0x18>)
 80003c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c6:	bf00      	nop
 80003c8:	080003dd 	.word	0x080003dd
 80003cc:	0800041d 	.word	0x0800041d
 80003d0:	0800044d 	.word	0x0800044d
 80003d4:	0800047d 	.word	0x0800047d
 80003d8:	080004ad 	.word	0x080004ad
		case INIT:
			green_time = 3; yellow_time = 2; red_time = 5;
 80003dc:	4b42      	ldr	r3, [pc, #264]	; (80004e8 <fsm_automatic_run+0x138>)
 80003de:	2203      	movs	r2, #3
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	4b42      	ldr	r3, [pc, #264]	; (80004ec <fsm_automatic_run+0x13c>)
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	4b41      	ldr	r3, [pc, #260]	; (80004f0 <fsm_automatic_run+0x140>)
 80003ea:	2205      	movs	r2, #5
 80003ec:	601a      	str	r2, [r3, #0]
			status = AUTO_RED_GREEN;
 80003ee:	4b3d      	ldr	r3, [pc, #244]	; (80004e4 <fsm_automatic_run+0x134>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	601a      	str	r2, [r3, #0]
			setTimer1(green_time*1000);
 80003f4:	4b3c      	ldr	r3, [pc, #240]	; (80004e8 <fsm_automatic_run+0x138>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003fc:	fb02 f303 	mul.w	r3, r2, r3
 8000400:	4618      	mov	r0, r3
 8000402:	f000 ff87 	bl	8001314 <setTimer1>
			setTimer2(500);
 8000406:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040a:	f000 ff9d 	bl	8001348 <setTimer2>
			isButtonPressed(0);
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff fe9c 	bl	800014c <isButtonPressed>
			display7SEGM(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f000 fc75 	bl	8000d04 <display7SEGM>
			break;
 800041a:	e060      	b.n	80004de <fsm_automatic_run+0x12e>
		case AUTO_RED_GREEN:
			display_trafficlight(status);
 800041c:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <fsm_automatic_run+0x134>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fd31 	bl	8000e88 <display_trafficlight>
			if (timer1_flag == 1){
 8000426:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <fsm_automatic_run+0x144>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d10b      	bne.n	8000446 <fsm_automatic_run+0x96>
				status = AUTO_RED_YELLOW;
 800042e:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <fsm_automatic_run+0x134>)
 8000430:	2203      	movs	r2, #3
 8000432:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time*1000);
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <fsm_automatic_run+0x13c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043c:	fb02 f303 	mul.w	r3, r2, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f000 ff67 	bl	8001314 <setTimer1>
			}
			areButtonsPressed();
 8000446:	f7ff ff53 	bl	80002f0 <areButtonsPressed>
			break;
 800044a:	e048      	b.n	80004de <fsm_automatic_run+0x12e>
		case AUTO_RED_YELLOW:
			display_trafficlight(status);
 800044c:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <fsm_automatic_run+0x134>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fd19 	bl	8000e88 <display_trafficlight>
			if (timer1_flag == 1){
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <fsm_automatic_run+0x144>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d10b      	bne.n	8000476 <fsm_automatic_run+0xc6>
				status = AUTO_GREEN_RED;
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <fsm_automatic_run+0x134>)
 8000460:	2204      	movs	r2, #4
 8000462:	601a      	str	r2, [r3, #0]
				setTimer1(green_time*1000);
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <fsm_automatic_run+0x138>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800046c:	fb02 f303 	mul.w	r3, r2, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f000 ff4f 	bl	8001314 <setTimer1>
			}
			areButtonsPressed();
 8000476:	f7ff ff3b 	bl	80002f0 <areButtonsPressed>
			break;
 800047a:	e030      	b.n	80004de <fsm_automatic_run+0x12e>
		case AUTO_GREEN_RED:
			display_trafficlight(status);
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <fsm_automatic_run+0x134>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fd01 	bl	8000e88 <display_trafficlight>
			if (timer1_flag == 1){
 8000486:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <fsm_automatic_run+0x144>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d10b      	bne.n	80004a6 <fsm_automatic_run+0xf6>
				status = AUTO_YELLOW_RED;
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <fsm_automatic_run+0x134>)
 8000490:	2205      	movs	r2, #5
 8000492:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time*1000);
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <fsm_automatic_run+0x13c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800049c:	fb02 f303 	mul.w	r3, r2, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 ff37 	bl	8001314 <setTimer1>
			}
			areButtonsPressed();
 80004a6:	f7ff ff23 	bl	80002f0 <areButtonsPressed>
			break;
 80004aa:	e018      	b.n	80004de <fsm_automatic_run+0x12e>
		case AUTO_YELLOW_RED:
			display_trafficlight(status);
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <fsm_automatic_run+0x134>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fce9 	bl	8000e88 <display_trafficlight>
			if (timer1_flag == 1){
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <fsm_automatic_run+0x144>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d10b      	bne.n	80004d6 <fsm_automatic_run+0x126>
				status = AUTO_RED_GREEN;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <fsm_automatic_run+0x134>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
				setTimer1(green_time*1000);
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <fsm_automatic_run+0x138>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004cc:	fb02 f303 	mul.w	r3, r2, r3
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 ff1f 	bl	8001314 <setTimer1>
			}
			areButtonsPressed();
 80004d6:	f7ff ff0b 	bl	80002f0 <areButtonsPressed>
			break;
 80004da:	e000      	b.n	80004de <fsm_automatic_run+0x12e>
		default:
			break;
 80004dc:	bf00      	nop
	}
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000078 	.word	0x20000078
 80004e8:	20000080 	.word	0x20000080
 80004ec:	20000088 	.word	0x20000088
 80004f0:	20000084 	.word	0x20000084
 80004f4:	200000d8 	.word	0x200000d8

080004f8 <fsm_manual_run>:
 *      Author: HP
 */

#include"fsm_manual.h"

void fsm_manual_run() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	switch (status) {
 80004fc:	4b4f      	ldr	r3, [pc, #316]	; (800063c <fsm_manual_run+0x144>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3b0a      	subs	r3, #10
 8000502:	2b04      	cmp	r3, #4
 8000504:	f200 8097 	bhi.w	8000636 <fsm_manual_run+0x13e>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <fsm_manual_run+0x18>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000525 	.word	0x08000525
 8000514:	08000569 	.word	0x08000569
 8000518:	08000595 	.word	0x08000595
 800051c:	080005cd 	.word	0x080005cd
 8000520:	08000605 	.word	0x08000605
	case MANUAL_INIT:
		switch (mode) {
 8000524:	4b46      	ldr	r3, [pc, #280]	; (8000640 <fsm_manual_run+0x148>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	2b03      	cmp	r3, #3
 800052c:	d81a      	bhi.n	8000564 <fsm_manual_run+0x6c>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <fsm_manual_run+0x3c>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000545 	.word	0x08000545
 8000538:	0800054d 	.word	0x0800054d
 800053c:	08000555 	.word	0x08000555
 8000540:	0800055d 	.word	0x0800055d
			case 1:
				status = MODE1;
 8000544:	4b3d      	ldr	r3, [pc, #244]	; (800063c <fsm_manual_run+0x144>)
 8000546:	220b      	movs	r2, #11
 8000548:	601a      	str	r2, [r3, #0]
				break;
 800054a:	e00c      	b.n	8000566 <fsm_manual_run+0x6e>
			case 2:
				status = MODE2;
 800054c:	4b3b      	ldr	r3, [pc, #236]	; (800063c <fsm_manual_run+0x144>)
 800054e:	220c      	movs	r2, #12
 8000550:	601a      	str	r2, [r3, #0]
				break;
 8000552:	e008      	b.n	8000566 <fsm_manual_run+0x6e>
			case 3:
				status = MODE3;
 8000554:	4b39      	ldr	r3, [pc, #228]	; (800063c <fsm_manual_run+0x144>)
 8000556:	220d      	movs	r2, #13
 8000558:	601a      	str	r2, [r3, #0]
				break;
 800055a:	e004      	b.n	8000566 <fsm_manual_run+0x6e>
			case 4:
				status = MODE4;
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <fsm_manual_run+0x144>)
 800055e:	220e      	movs	r2, #14
 8000560:	601a      	str	r2, [r3, #0]
				break;
 8000562:	e000      	b.n	8000566 <fsm_manual_run+0x6e>
			default:
				break;
 8000564:	bf00      	nop
		}
		break;
 8000566:	e067      	b.n	8000638 <fsm_manual_run+0x140>
	case MODE1:
		red_time = 5;
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <fsm_manual_run+0x14c>)
 800056a:	2205      	movs	r2, #5
 800056c:	601a      	str	r2, [r3, #0]
		green_time = 3;
 800056e:	4b36      	ldr	r3, [pc, #216]	; (8000648 <fsm_manual_run+0x150>)
 8000570:	2203      	movs	r2, #3
 8000572:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <fsm_manual_run+0x154>)
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
		status = AUTO_RED_GREEN;
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <fsm_manual_run+0x144>)
 800057c:	2202      	movs	r2, #2
 800057e:	601a      	str	r2, [r3, #0]
		setTimer1(green_time*1000);
 8000580:	4b31      	ldr	r3, [pc, #196]	; (8000648 <fsm_manual_run+0x150>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000588:	fb02 f303 	mul.w	r3, r2, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fec1 	bl	8001314 <setTimer1>
		break;
 8000592:	e051      	b.n	8000638 <fsm_manual_run+0x140>
	case MODE2:
		red_time = value;
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <fsm_manual_run+0x158>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <fsm_manual_run+0x14c>)
 800059a:	6013      	str	r3, [r2, #0]
		green_time = (red_time > 2)? red_time - 2 : 1;
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <fsm_manual_run+0x14c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	bfb8      	it	lt
 80005a4:	2303      	movlt	r3, #3
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4a27      	ldr	r2, [pc, #156]	; (8000648 <fsm_manual_run+0x150>)
 80005aa:	6013      	str	r3, [r2, #0]
		yellow_time = 2;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <fsm_manual_run+0x154>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	601a      	str	r2, [r3, #0]
		status = AUTO_RED_GREEN;
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <fsm_manual_run+0x144>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
		setTimer1(green_time*1000);
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <fsm_manual_run+0x150>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c0:	fb02 f303 	mul.w	r3, r2, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fea5 	bl	8001314 <setTimer1>
		break;
 80005ca:	e035      	b.n	8000638 <fsm_manual_run+0x140>
	case MODE3:
		yellow_time = value;
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <fsm_manual_run+0x158>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1e      	ldr	r2, [pc, #120]	; (800064c <fsm_manual_run+0x154>)
 80005d2:	6013      	str	r3, [r2, #0]
		green_time = value + 3;
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <fsm_manual_run+0x158>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3303      	adds	r3, #3
 80005da:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <fsm_manual_run+0x150>)
 80005dc:	6013      	str	r3, [r2, #0]
		red_time = value*2 + 3;
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <fsm_manual_run+0x158>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	3303      	adds	r3, #3
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <fsm_manual_run+0x14c>)
 80005e8:	6013      	str	r3, [r2, #0]
		status = AUTO_YELLOW_RED;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <fsm_manual_run+0x144>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	601a      	str	r2, [r3, #0]
		setTimer1(yellow_time*1000);
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <fsm_manual_run+0x154>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f8:	fb02 f303 	mul.w	r3, r2, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe89 	bl	8001314 <setTimer1>
		break;
 8000602:	e019      	b.n	8000638 <fsm_manual_run+0x140>
	case MODE4:
		green_time = value;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <fsm_manual_run+0x158>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <fsm_manual_run+0x150>)
 800060a:	6013      	str	r3, [r2, #0]
		red_time = value + 2;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <fsm_manual_run+0x158>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3302      	adds	r3, #2
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <fsm_manual_run+0x14c>)
 8000614:	6013      	str	r3, [r2, #0]
		yellow_time = 2;
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <fsm_manual_run+0x154>)
 8000618:	2202      	movs	r2, #2
 800061a:	601a      	str	r2, [r3, #0]
		status = AUTO_GREEN_RED;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <fsm_manual_run+0x144>)
 800061e:	2204      	movs	r2, #4
 8000620:	601a      	str	r2, [r3, #0]
		setTimer1(green_time*1000);
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <fsm_manual_run+0x150>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fe70 	bl	8001314 <setTimer1>
		break;
 8000634:	e000      	b.n	8000638 <fsm_manual_run+0x140>
	default:
		break;
 8000636:	bf00      	nop
	}
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000078 	.word	0x20000078
 8000640:	2000007c 	.word	0x2000007c
 8000644:	20000084 	.word	0x20000084
 8000648:	20000080 	.word	0x20000080
 800064c:	20000088 	.word	0x20000088
 8000650:	2000003c 	.word	0x2000003c

08000654 <display7SEG>:
 *  Created on: Oct 24, 2022
 *      Author: HP
 */
#include"led_display.h"

void display7SEG(int num) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	switch(num) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b09      	cmp	r3, #9
 8000660:	f200 8180 	bhi.w	8000964 <display7SEG+0x310>
 8000664:	a201      	add	r2, pc, #4	; (adr r2, 800066c <display7SEG+0x18>)
 8000666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066a:	bf00      	nop
 800066c:	08000695 	.word	0x08000695
 8000670:	080006dd 	.word	0x080006dd
 8000674:	08000725 	.word	0x08000725
 8000678:	0800076d 	.word	0x0800076d
 800067c:	080007b5 	.word	0x080007b5
 8000680:	080007fd 	.word	0x080007fd
 8000684:	08000845 	.word	0x08000845
 8000688:	0800088d 	.word	0x0800088d
 800068c:	080008d5 	.word	0x080008d5
 8000690:	0800091d 	.word	0x0800091d
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2101      	movs	r1, #1
 8000698:	48b4      	ldr	r0, [pc, #720]	; (800096c <display7SEG+0x318>)
 800069a:	f001 f9d8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	48b2      	ldr	r0, [pc, #712]	; (800096c <display7SEG+0x318>)
 80006a4:	f001 f9d3 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2104      	movs	r1, #4
 80006ac:	48af      	ldr	r0, [pc, #700]	; (800096c <display7SEG+0x318>)
 80006ae:	f001 f9ce 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	48ad      	ldr	r0, [pc, #692]	; (800096c <display7SEG+0x318>)
 80006b8:	f001 f9c9 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	48aa      	ldr	r0, [pc, #680]	; (800096c <display7SEG+0x318>)
 80006c2:	f001 f9c4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	48a8      	ldr	r0, [pc, #672]	; (800096c <display7SEG+0x318>)
 80006cc:	f001 f9bf 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2140      	movs	r1, #64	; 0x40
 80006d4:	48a5      	ldr	r0, [pc, #660]	; (800096c <display7SEG+0x318>)
 80006d6:	f001 f9ba 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 80006da:	e143      	b.n	8000964 <display7SEG+0x310>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2101      	movs	r1, #1
 80006e0:	48a2      	ldr	r0, [pc, #648]	; (800096c <display7SEG+0x318>)
 80006e2:	f001 f9b4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2102      	movs	r1, #2
 80006ea:	48a0      	ldr	r0, [pc, #640]	; (800096c <display7SEG+0x318>)
 80006ec:	f001 f9af 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	489d      	ldr	r0, [pc, #628]	; (800096c <display7SEG+0x318>)
 80006f6:	f001 f9aa 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	489b      	ldr	r0, [pc, #620]	; (800096c <display7SEG+0x318>)
 8000700:	f001 f9a5 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2110      	movs	r1, #16
 8000708:	4898      	ldr	r0, [pc, #608]	; (800096c <display7SEG+0x318>)
 800070a:	f001 f9a0 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2120      	movs	r1, #32
 8000712:	4896      	ldr	r0, [pc, #600]	; (800096c <display7SEG+0x318>)
 8000714:	f001 f99b 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	4893      	ldr	r0, [pc, #588]	; (800096c <display7SEG+0x318>)
 800071e:	f001 f996 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000722:	e11f      	b.n	8000964 <display7SEG+0x310>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2101      	movs	r1, #1
 8000728:	4890      	ldr	r0, [pc, #576]	; (800096c <display7SEG+0x318>)
 800072a:	f001 f990 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2102      	movs	r1, #2
 8000732:	488e      	ldr	r0, [pc, #568]	; (800096c <display7SEG+0x318>)
 8000734:	f001 f98b 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2104      	movs	r1, #4
 800073c:	488b      	ldr	r0, [pc, #556]	; (800096c <display7SEG+0x318>)
 800073e:	f001 f986 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	4889      	ldr	r0, [pc, #548]	; (800096c <display7SEG+0x318>)
 8000748:	f001 f981 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2110      	movs	r1, #16
 8000750:	4886      	ldr	r0, [pc, #536]	; (800096c <display7SEG+0x318>)
 8000752:	f001 f97c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2120      	movs	r1, #32
 800075a:	4884      	ldr	r0, [pc, #528]	; (800096c <display7SEG+0x318>)
 800075c:	f001 f977 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	4881      	ldr	r0, [pc, #516]	; (800096c <display7SEG+0x318>)
 8000766:	f001 f972 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 800076a:	e0fb      	b.n	8000964 <display7SEG+0x310>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2101      	movs	r1, #1
 8000770:	487e      	ldr	r0, [pc, #504]	; (800096c <display7SEG+0x318>)
 8000772:	f001 f96c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2102      	movs	r1, #2
 800077a:	487c      	ldr	r0, [pc, #496]	; (800096c <display7SEG+0x318>)
 800077c:	f001 f967 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2104      	movs	r1, #4
 8000784:	4879      	ldr	r0, [pc, #484]	; (800096c <display7SEG+0x318>)
 8000786:	f001 f962 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2108      	movs	r1, #8
 800078e:	4877      	ldr	r0, [pc, #476]	; (800096c <display7SEG+0x318>)
 8000790:	f001 f95d 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2110      	movs	r1, #16
 8000798:	4874      	ldr	r0, [pc, #464]	; (800096c <display7SEG+0x318>)
 800079a:	f001 f958 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2120      	movs	r1, #32
 80007a2:	4872      	ldr	r0, [pc, #456]	; (800096c <display7SEG+0x318>)
 80007a4:	f001 f953 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	486f      	ldr	r0, [pc, #444]	; (800096c <display7SEG+0x318>)
 80007ae:	f001 f94e 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 80007b2:	e0d7      	b.n	8000964 <display7SEG+0x310>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2101      	movs	r1, #1
 80007b8:	486c      	ldr	r0, [pc, #432]	; (800096c <display7SEG+0x318>)
 80007ba:	f001 f948 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	486a      	ldr	r0, [pc, #424]	; (800096c <display7SEG+0x318>)
 80007c4:	f001 f943 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2104      	movs	r1, #4
 80007cc:	4867      	ldr	r0, [pc, #412]	; (800096c <display7SEG+0x318>)
 80007ce:	f001 f93e 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2108      	movs	r1, #8
 80007d6:	4865      	ldr	r0, [pc, #404]	; (800096c <display7SEG+0x318>)
 80007d8:	f001 f939 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2110      	movs	r1, #16
 80007e0:	4862      	ldr	r0, [pc, #392]	; (800096c <display7SEG+0x318>)
 80007e2:	f001 f934 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4860      	ldr	r0, [pc, #384]	; (800096c <display7SEG+0x318>)
 80007ec:	f001 f92f 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	485d      	ldr	r0, [pc, #372]	; (800096c <display7SEG+0x318>)
 80007f6:	f001 f92a 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 80007fa:	e0b3      	b.n	8000964 <display7SEG+0x310>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2101      	movs	r1, #1
 8000800:	485a      	ldr	r0, [pc, #360]	; (800096c <display7SEG+0x318>)
 8000802:	f001 f924 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2102      	movs	r1, #2
 800080a:	4858      	ldr	r0, [pc, #352]	; (800096c <display7SEG+0x318>)
 800080c:	f001 f91f 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	4855      	ldr	r0, [pc, #340]	; (800096c <display7SEG+0x318>)
 8000816:	f001 f91a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4853      	ldr	r0, [pc, #332]	; (800096c <display7SEG+0x318>)
 8000820:	f001 f915 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4850      	ldr	r0, [pc, #320]	; (800096c <display7SEG+0x318>)
 800082a:	f001 f910 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	484e      	ldr	r0, [pc, #312]	; (800096c <display7SEG+0x318>)
 8000834:	f001 f90b 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2140      	movs	r1, #64	; 0x40
 800083c:	484b      	ldr	r0, [pc, #300]	; (800096c <display7SEG+0x318>)
 800083e:	f001 f906 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000842:	e08f      	b.n	8000964 <display7SEG+0x310>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2101      	movs	r1, #1
 8000848:	4848      	ldr	r0, [pc, #288]	; (800096c <display7SEG+0x318>)
 800084a:	f001 f900 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2102      	movs	r1, #2
 8000852:	4846      	ldr	r0, [pc, #280]	; (800096c <display7SEG+0x318>)
 8000854:	f001 f8fb 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2104      	movs	r1, #4
 800085c:	4843      	ldr	r0, [pc, #268]	; (800096c <display7SEG+0x318>)
 800085e:	f001 f8f6 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	4841      	ldr	r0, [pc, #260]	; (800096c <display7SEG+0x318>)
 8000868:	f001 f8f1 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2110      	movs	r1, #16
 8000870:	483e      	ldr	r0, [pc, #248]	; (800096c <display7SEG+0x318>)
 8000872:	f001 f8ec 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	483c      	ldr	r0, [pc, #240]	; (800096c <display7SEG+0x318>)
 800087c:	f001 f8e7 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	4839      	ldr	r0, [pc, #228]	; (800096c <display7SEG+0x318>)
 8000886:	f001 f8e2 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 800088a:	e06b      	b.n	8000964 <display7SEG+0x310>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2101      	movs	r1, #1
 8000890:	4836      	ldr	r0, [pc, #216]	; (800096c <display7SEG+0x318>)
 8000892:	f001 f8dc 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	4834      	ldr	r0, [pc, #208]	; (800096c <display7SEG+0x318>)
 800089c:	f001 f8d7 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2104      	movs	r1, #4
 80008a4:	4831      	ldr	r0, [pc, #196]	; (800096c <display7SEG+0x318>)
 80008a6:	f001 f8d2 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2108      	movs	r1, #8
 80008ae:	482f      	ldr	r0, [pc, #188]	; (800096c <display7SEG+0x318>)
 80008b0:	f001 f8cd 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	482c      	ldr	r0, [pc, #176]	; (800096c <display7SEG+0x318>)
 80008ba:	f001 f8c8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2120      	movs	r1, #32
 80008c2:	482a      	ldr	r0, [pc, #168]	; (800096c <display7SEG+0x318>)
 80008c4:	f001 f8c3 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2140      	movs	r1, #64	; 0x40
 80008cc:	4827      	ldr	r0, [pc, #156]	; (800096c <display7SEG+0x318>)
 80008ce:	f001 f8be 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 80008d2:	e047      	b.n	8000964 <display7SEG+0x310>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	4824      	ldr	r0, [pc, #144]	; (800096c <display7SEG+0x318>)
 80008da:	f001 f8b8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2102      	movs	r1, #2
 80008e2:	4822      	ldr	r0, [pc, #136]	; (800096c <display7SEG+0x318>)
 80008e4:	f001 f8b3 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2104      	movs	r1, #4
 80008ec:	481f      	ldr	r0, [pc, #124]	; (800096c <display7SEG+0x318>)
 80008ee:	f001 f8ae 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	481d      	ldr	r0, [pc, #116]	; (800096c <display7SEG+0x318>)
 80008f8:	f001 f8a9 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	481a      	ldr	r0, [pc, #104]	; (800096c <display7SEG+0x318>)
 8000902:	f001 f8a4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	4818      	ldr	r0, [pc, #96]	; (800096c <display7SEG+0x318>)
 800090c:	f001 f89f 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2140      	movs	r1, #64	; 0x40
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <display7SEG+0x318>)
 8000916:	f001 f89a 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 800091a:	e023      	b.n	8000964 <display7SEG+0x310>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2101      	movs	r1, #1
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <display7SEG+0x318>)
 8000922:	f001 f894 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2102      	movs	r1, #2
 800092a:	4810      	ldr	r0, [pc, #64]	; (800096c <display7SEG+0x318>)
 800092c:	f001 f88f 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2104      	movs	r1, #4
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <display7SEG+0x318>)
 8000936:	f001 f88a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <display7SEG+0x318>)
 8000940:	f001 f885 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <display7SEG+0x318>)
 800094a:	f001 f880 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <display7SEG+0x318>)
 8000954:	f001 f87b 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2140      	movs	r1, #64	; 0x40
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <display7SEG+0x318>)
 800095e:	f001 f876 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000962:	bf00      	nop
	}
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40010c00 	.word	0x40010c00

08000970 <display7SEG1>:

void display7SEG1(int num) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	switch(num) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b09      	cmp	r3, #9
 800097c:	f200 81bc 	bhi.w	8000cf8 <display7SEG1+0x388>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <display7SEG1+0x18>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	080009b1 	.word	0x080009b1
 800098c:	08000a05 	.word	0x08000a05
 8000990:	08000a59 	.word	0x08000a59
 8000994:	08000aad 	.word	0x08000aad
 8000998:	08000b01 	.word	0x08000b01
 800099c:	08000b55 	.word	0x08000b55
 80009a0:	08000ba9 	.word	0x08000ba9
 80009a4:	08000bfd 	.word	0x08000bfd
 80009a8:	08000c51 	.word	0x08000c51
 80009ac:	08000ca5 	.word	0x08000ca5
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	48d2      	ldr	r0, [pc, #840]	; (8000d00 <display7SEG1+0x390>)
 80009b6:	f001 f84a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	48cf      	ldr	r0, [pc, #828]	; (8000d00 <display7SEG1+0x390>)
 80009c2:	f001 f844 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009cc:	48cc      	ldr	r0, [pc, #816]	; (8000d00 <display7SEG1+0x390>)
 80009ce:	f001 f83e 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	48c9      	ldr	r0, [pc, #804]	; (8000d00 <display7SEG1+0x390>)
 80009da:	f001 f838 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	48c6      	ldr	r0, [pc, #792]	; (8000d00 <display7SEG1+0x390>)
 80009e6:	f001 f832 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	48c3      	ldr	r0, [pc, #780]	; (8000d00 <display7SEG1+0x390>)
 80009f2:	f001 f82c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	48c0      	ldr	r0, [pc, #768]	; (8000d00 <display7SEG1+0x390>)
 80009fe:	f001 f826 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000a02:	e179      	b.n	8000cf8 <display7SEG1+0x388>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	48bd      	ldr	r0, [pc, #756]	; (8000d00 <display7SEG1+0x390>)
 8000a0a:	f001 f820 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	48ba      	ldr	r0, [pc, #744]	; (8000d00 <display7SEG1+0x390>)
 8000a16:	f001 f81a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	48b7      	ldr	r0, [pc, #732]	; (8000d00 <display7SEG1+0x390>)
 8000a22:	f001 f814 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2c:	48b4      	ldr	r0, [pc, #720]	; (8000d00 <display7SEG1+0x390>)
 8000a2e:	f001 f80e 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a38:	48b1      	ldr	r0, [pc, #708]	; (8000d00 <display7SEG1+0x390>)
 8000a3a:	f001 f808 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a44:	48ae      	ldr	r0, [pc, #696]	; (8000d00 <display7SEG1+0x390>)
 8000a46:	f001 f802 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a50:	48ab      	ldr	r0, [pc, #684]	; (8000d00 <display7SEG1+0x390>)
 8000a52:	f000 fffc 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000a56:	e14f      	b.n	8000cf8 <display7SEG1+0x388>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	48a8      	ldr	r0, [pc, #672]	; (8000d00 <display7SEG1+0x390>)
 8000a5e:	f000 fff6 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	48a5      	ldr	r0, [pc, #660]	; (8000d00 <display7SEG1+0x390>)
 8000a6a:	f000 fff0 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	48a2      	ldr	r0, [pc, #648]	; (8000d00 <display7SEG1+0x390>)
 8000a76:	f000 ffea 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	489f      	ldr	r0, [pc, #636]	; (8000d00 <display7SEG1+0x390>)
 8000a82:	f000 ffe4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a8c:	489c      	ldr	r0, [pc, #624]	; (8000d00 <display7SEG1+0x390>)
 8000a8e:	f000 ffde 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a98:	4899      	ldr	r0, [pc, #612]	; (8000d00 <display7SEG1+0x390>)
 8000a9a:	f000 ffd8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	4896      	ldr	r0, [pc, #600]	; (8000d00 <display7SEG1+0x390>)
 8000aa6:	f000 ffd2 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000aaa:	e125      	b.n	8000cf8 <display7SEG1+0x388>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	4893      	ldr	r0, [pc, #588]	; (8000d00 <display7SEG1+0x390>)
 8000ab2:	f000 ffcc 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000abc:	4890      	ldr	r0, [pc, #576]	; (8000d00 <display7SEG1+0x390>)
 8000abe:	f000 ffc6 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	488d      	ldr	r0, [pc, #564]	; (8000d00 <display7SEG1+0x390>)
 8000aca:	f000 ffc0 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad4:	488a      	ldr	r0, [pc, #552]	; (8000d00 <display7SEG1+0x390>)
 8000ad6:	f000 ffba 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae0:	4887      	ldr	r0, [pc, #540]	; (8000d00 <display7SEG1+0x390>)
 8000ae2:	f000 ffb4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aec:	4884      	ldr	r0, [pc, #528]	; (8000d00 <display7SEG1+0x390>)
 8000aee:	f000 ffae 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4881      	ldr	r0, [pc, #516]	; (8000d00 <display7SEG1+0x390>)
 8000afa:	f000 ffa8 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000afe:	e0fb      	b.n	8000cf8 <display7SEG1+0x388>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	487e      	ldr	r0, [pc, #504]	; (8000d00 <display7SEG1+0x390>)
 8000b06:	f000 ffa2 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b10:	487b      	ldr	r0, [pc, #492]	; (8000d00 <display7SEG1+0x390>)
 8000b12:	f000 ff9c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	4878      	ldr	r0, [pc, #480]	; (8000d00 <display7SEG1+0x390>)
 8000b1e:	f000 ff96 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	4875      	ldr	r0, [pc, #468]	; (8000d00 <display7SEG1+0x390>)
 8000b2a:	f000 ff90 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b34:	4872      	ldr	r0, [pc, #456]	; (8000d00 <display7SEG1+0x390>)
 8000b36:	f000 ff8a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b40:	486f      	ldr	r0, [pc, #444]	; (8000d00 <display7SEG1+0x390>)
 8000b42:	f000 ff84 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4c:	486c      	ldr	r0, [pc, #432]	; (8000d00 <display7SEG1+0x390>)
 8000b4e:	f000 ff7e 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000b52:	e0d1      	b.n	8000cf8 <display7SEG1+0x388>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	4869      	ldr	r0, [pc, #420]	; (8000d00 <display7SEG1+0x390>)
 8000b5a:	f000 ff78 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4866      	ldr	r0, [pc, #408]	; (8000d00 <display7SEG1+0x390>)
 8000b66:	f000 ff72 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	4863      	ldr	r0, [pc, #396]	; (8000d00 <display7SEG1+0x390>)
 8000b72:	f000 ff6c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4860      	ldr	r0, [pc, #384]	; (8000d00 <display7SEG1+0x390>)
 8000b7e:	f000 ff66 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b88:	485d      	ldr	r0, [pc, #372]	; (8000d00 <display7SEG1+0x390>)
 8000b8a:	f000 ff60 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	485a      	ldr	r0, [pc, #360]	; (8000d00 <display7SEG1+0x390>)
 8000b96:	f000 ff5a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	4857      	ldr	r0, [pc, #348]	; (8000d00 <display7SEG1+0x390>)
 8000ba2:	f000 ff54 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000ba6:	e0a7      	b.n	8000cf8 <display7SEG1+0x388>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	4854      	ldr	r0, [pc, #336]	; (8000d00 <display7SEG1+0x390>)
 8000bae:	f000 ff4e 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	4851      	ldr	r0, [pc, #324]	; (8000d00 <display7SEG1+0x390>)
 8000bba:	f000 ff48 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc4:	484e      	ldr	r0, [pc, #312]	; (8000d00 <display7SEG1+0x390>)
 8000bc6:	f000 ff42 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd0:	484b      	ldr	r0, [pc, #300]	; (8000d00 <display7SEG1+0x390>)
 8000bd2:	f000 ff3c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bdc:	4848      	ldr	r0, [pc, #288]	; (8000d00 <display7SEG1+0x390>)
 8000bde:	f000 ff36 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be8:	4845      	ldr	r0, [pc, #276]	; (8000d00 <display7SEG1+0x390>)
 8000bea:	f000 ff30 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	4842      	ldr	r0, [pc, #264]	; (8000d00 <display7SEG1+0x390>)
 8000bf6:	f000 ff2a 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000bfa:	e07d      	b.n	8000cf8 <display7SEG1+0x388>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	483f      	ldr	r0, [pc, #252]	; (8000d00 <display7SEG1+0x390>)
 8000c02:	f000 ff24 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	483c      	ldr	r0, [pc, #240]	; (8000d00 <display7SEG1+0x390>)
 8000c0e:	f000 ff1e 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	4839      	ldr	r0, [pc, #228]	; (8000d00 <display7SEG1+0x390>)
 8000c1a:	f000 ff18 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	4836      	ldr	r0, [pc, #216]	; (8000d00 <display7SEG1+0x390>)
 8000c26:	f000 ff12 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	4833      	ldr	r0, [pc, #204]	; (8000d00 <display7SEG1+0x390>)
 8000c32:	f000 ff0c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3c:	4830      	ldr	r0, [pc, #192]	; (8000d00 <display7SEG1+0x390>)
 8000c3e:	f000 ff06 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	482d      	ldr	r0, [pc, #180]	; (8000d00 <display7SEG1+0x390>)
 8000c4a:	f000 ff00 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000c4e:	e053      	b.n	8000cf8 <display7SEG1+0x388>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	482a      	ldr	r0, [pc, #168]	; (8000d00 <display7SEG1+0x390>)
 8000c56:	f000 fefa 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4827      	ldr	r0, [pc, #156]	; (8000d00 <display7SEG1+0x390>)
 8000c62:	f000 fef4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	4824      	ldr	r0, [pc, #144]	; (8000d00 <display7SEG1+0x390>)
 8000c6e:	f000 feee 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <display7SEG1+0x390>)
 8000c7a:	f000 fee8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c84:	481e      	ldr	r0, [pc, #120]	; (8000d00 <display7SEG1+0x390>)
 8000c86:	f000 fee2 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <display7SEG1+0x390>)
 8000c92:	f000 fedc 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9c:	4818      	ldr	r0, [pc, #96]	; (8000d00 <display7SEG1+0x390>)
 8000c9e:	f000 fed6 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000ca2:	e029      	b.n	8000cf8 <display7SEG1+0x388>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG01_Pin, RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <display7SEG1+0x390>)
 8000caa:	f000 fed0 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG11_Pin, RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <display7SEG1+0x390>)
 8000cb6:	f000 feca 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG21_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	480f      	ldr	r0, [pc, #60]	; (8000d00 <display7SEG1+0x390>)
 8000cc2:	f000 fec4 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG31_Pin, RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <display7SEG1+0x390>)
 8000cce:	f000 febe 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG41_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <display7SEG1+0x390>)
 8000cda:	f000 feb8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG51_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <display7SEG1+0x390>)
 8000ce6:	f000 feb2 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG61_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <display7SEG1+0x390>)
 8000cf2:	f000 feac 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000cf6:	bf00      	nop
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <display7SEGM>:

void display7SEGM(int num) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	switch(num) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	f200 80b3 	bhi.w	8000e7c <display7SEGM+0x178>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <display7SEGM+0x18>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d81 	.word	0x08000d81
 8000d24:	08000dd5 	.word	0x08000dd5
 8000d28:	08000e29 	.word	0x08000e29
	case 1:
		HAL_GPIO_WritePin(GPIOA, SEG0_M_Pin, SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4854      	ldr	r0, [pc, #336]	; (8000e84 <display7SEGM+0x180>)
 8000d32:	f000 fe8c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_M_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3c:	4851      	ldr	r0, [pc, #324]	; (8000e84 <display7SEGM+0x180>)
 8000d3e:	f000 fe86 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG2_M_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d48:	484e      	ldr	r0, [pc, #312]	; (8000e84 <display7SEGM+0x180>)
 8000d4a:	f000 fe80 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG3_M_Pin, SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d54:	484b      	ldr	r0, [pc, #300]	; (8000e84 <display7SEGM+0x180>)
 8000d56:	f000 fe7a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_M_Pin, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	4848      	ldr	r0, [pc, #288]	; (8000e84 <display7SEGM+0x180>)
 8000d62:	f000 fe74 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG5_M_Pin, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d6c:	4845      	ldr	r0, [pc, #276]	; (8000e84 <display7SEGM+0x180>)
 8000d6e:	f000 fe6e 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG6_M_Pin, SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	4842      	ldr	r0, [pc, #264]	; (8000e84 <display7SEGM+0x180>)
 8000d7a:	f000 fe68 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000d7e:	e07d      	b.n	8000e7c <display7SEGM+0x178>
	case 2:
		HAL_GPIO_WritePin(GPIOA, SEG0_M_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2101      	movs	r1, #1
 8000d84:	483f      	ldr	r0, [pc, #252]	; (8000e84 <display7SEGM+0x180>)
 8000d86:	f000 fe62 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_M_Pin, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d90:	483c      	ldr	r0, [pc, #240]	; (8000e84 <display7SEGM+0x180>)
 8000d92:	f000 fe5c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG2_M_Pin, SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9c:	4839      	ldr	r0, [pc, #228]	; (8000e84 <display7SEGM+0x180>)
 8000d9e:	f000 fe56 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG3_M_Pin, RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da8:	4836      	ldr	r0, [pc, #216]	; (8000e84 <display7SEGM+0x180>)
 8000daa:	f000 fe50 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_M_Pin, RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	4833      	ldr	r0, [pc, #204]	; (8000e84 <display7SEGM+0x180>)
 8000db6:	f000 fe4a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG5_M_Pin, SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc0:	4830      	ldr	r0, [pc, #192]	; (8000e84 <display7SEGM+0x180>)
 8000dc2:	f000 fe44 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG6_M_Pin, RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dcc:	482d      	ldr	r0, [pc, #180]	; (8000e84 <display7SEGM+0x180>)
 8000dce:	f000 fe3e 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000dd2:	e053      	b.n	8000e7c <display7SEGM+0x178>
	case 3:
		HAL_GPIO_WritePin(GPIOA, SEG0_M_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	482a      	ldr	r0, [pc, #168]	; (8000e84 <display7SEGM+0x180>)
 8000dda:	f000 fe38 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_M_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	4827      	ldr	r0, [pc, #156]	; (8000e84 <display7SEGM+0x180>)
 8000de6:	f000 fe32 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG2_M_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df0:	4824      	ldr	r0, [pc, #144]	; (8000e84 <display7SEGM+0x180>)
 8000df2:	f000 fe2c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG3_M_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfc:	4821      	ldr	r0, [pc, #132]	; (8000e84 <display7SEGM+0x180>)
 8000dfe:	f000 fe26 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_M_Pin, SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <display7SEGM+0x180>)
 8000e0a:	f000 fe20 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG5_M_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e14:	481b      	ldr	r0, [pc, #108]	; (8000e84 <display7SEGM+0x180>)
 8000e16:	f000 fe1a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG6_M_Pin, RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <display7SEGM+0x180>)
 8000e22:	f000 fe14 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000e26:	e029      	b.n	8000e7c <display7SEGM+0x178>
	case 4:
			HAL_GPIO_WritePin(GPIOA, SEG0_M_Pin, SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <display7SEGM+0x180>)
 8000e2e:	f000 fe0e 	bl	8001a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG1_M_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <display7SEGM+0x180>)
 8000e3a:	f000 fe08 	bl	8001a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG2_M_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <display7SEGM+0x180>)
 8000e46:	f000 fe02 	bl	8001a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG3_M_Pin, SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <display7SEGM+0x180>)
 8000e52:	f000 fdfc 	bl	8001a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG4_M_Pin, SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <display7SEGM+0x180>)
 8000e5e:	f000 fdf6 	bl	8001a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG5_M_Pin, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <display7SEGM+0x180>)
 8000e6a:	f000 fdf0 	bl	8001a4e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, SEG6_M_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <display7SEGM+0x180>)
 8000e76:	f000 fdea 	bl	8001a4e <HAL_GPIO_WritePin>
			break;
 8000e7a:	bf00      	nop
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010800 	.word	0x40010800

08000e88 <display_trafficlight>:

void display_trafficlight(int status) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	switch (status) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	f200 809c 	bhi.w	8000fd2 <display_trafficlight+0x14a>
 8000e9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <display_trafficlight+0x18>)
 8000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea0:	08000eb5 	.word	0x08000eb5
 8000ea4:	08000ecb 	.word	0x08000ecb
 8000ea8:	08000f0d 	.word	0x08000f0d
 8000eac:	08000f4f 	.word	0x08000f4f
 8000eb0:	08000f91 	.word	0x08000f91
	case INIT:
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	210e      	movs	r1, #14
 8000eb8:	484c      	ldr	r0, [pc, #304]	; (8000fec <display_trafficlight+0x164>)
 8000eba:	f000 fdc8 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin | LED_GREEN_1_Pin | LED_RED_1_Pin, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2170      	movs	r1, #112	; 0x70
 8000ec2:	484a      	ldr	r0, [pc, #296]	; (8000fec <display_trafficlight+0x164>)
 8000ec4:	f000 fdc3 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000ec8:	e08c      	b.n	8000fe4 <display_trafficlight+0x15c>
	case AUTO_RED_GREEN:
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_YELLOW_1_Pin | LED_RED_1_Pin, SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	213c      	movs	r1, #60	; 0x3c
 8000ece:	4847      	ldr	r0, [pc, #284]	; (8000fec <display_trafficlight+0x164>)
 8000ed0:	f000 fdbd 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_1_Pin, RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	4844      	ldr	r0, [pc, #272]	; (8000fec <display_trafficlight+0x164>)
 8000eda:	f000 fdb8 	bl	8001a4e <HAL_GPIO_WritePin>
		if (mode == 2) {
 8000ede:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <display_trafficlight+0x168>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d10c      	bne.n	8000f00 <display_trafficlight+0x78>
			if (timer2_flag == 1) {
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <display_trafficlight+0x16c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d173      	bne.n	8000fd6 <display_trafficlight+0x14e>
				HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 8000eee:	2102      	movs	r1, #2
 8000ef0:	483e      	ldr	r0, [pc, #248]	; (8000fec <display_trafficlight+0x164>)
 8000ef2:	f000 fdc4 	bl	8001a7e <HAL_GPIO_TogglePin>
				setTimer2(500);
 8000ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000efa:	f000 fa25 	bl	8001348 <setTimer2>
			}
		}
		else {
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, RESET);
		}
		break;
 8000efe:	e06a      	b.n	8000fd6 <display_trafficlight+0x14e>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2102      	movs	r1, #2
 8000f04:	4839      	ldr	r0, [pc, #228]	; (8000fec <display_trafficlight+0x164>)
 8000f06:	f000 fda2 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000f0a:	e064      	b.n	8000fd6 <display_trafficlight+0x14e>
	case AUTO_RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_GREEN_1_Pin | LED_RED_1_Pin, SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	215c      	movs	r1, #92	; 0x5c
 8000f10:	4836      	ldr	r0, [pc, #216]	; (8000fec <display_trafficlight+0x164>)
 8000f12:	f000 fd9c 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_1_Pin, RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	4834      	ldr	r0, [pc, #208]	; (8000fec <display_trafficlight+0x164>)
 8000f1c:	f000 fd97 	bl	8001a4e <HAL_GPIO_WritePin>
		if (mode == 2) {
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <display_trafficlight+0x168>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d10c      	bne.n	8000f42 <display_trafficlight+0xba>
			if (timer2_flag == 1) {
 8000f28:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <display_trafficlight+0x16c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d154      	bne.n	8000fda <display_trafficlight+0x152>
				HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin);
 8000f30:	2102      	movs	r1, #2
 8000f32:	482e      	ldr	r0, [pc, #184]	; (8000fec <display_trafficlight+0x164>)
 8000f34:	f000 fda3 	bl	8001a7e <HAL_GPIO_TogglePin>
				setTimer2(500);
 8000f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3c:	f000 fa04 	bl	8001348 <setTimer2>
			}
		}
		else {
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, RESET);
		}
		break;
 8000f40:	e04b      	b.n	8000fda <display_trafficlight+0x152>
			HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2102      	movs	r1, #2
 8000f46:	4829      	ldr	r0, [pc, #164]	; (8000fec <display_trafficlight+0x164>)
 8000f48:	f000 fd81 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000f4c:	e045      	b.n	8000fda <display_trafficlight+0x152>
	case AUTO_GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_Pin | LED_GREEN_1_Pin | LED_YELLOW_1_Pin, SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2166      	movs	r1, #102	; 0x66
 8000f52:	4826      	ldr	r0, [pc, #152]	; (8000fec <display_trafficlight+0x164>)
 8000f54:	f000 fd7b 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4823      	ldr	r0, [pc, #140]	; (8000fec <display_trafficlight+0x164>)
 8000f5e:	f000 fd76 	bl	8001a4e <HAL_GPIO_WritePin>
		if (mode == 4) {
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <display_trafficlight+0x168>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d10c      	bne.n	8000f84 <display_trafficlight+0xfc>
			if (timer2_flag == 1) {
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <display_trafficlight+0x16c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d135      	bne.n	8000fde <display_trafficlight+0x156>
				HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin);
 8000f72:	2108      	movs	r1, #8
 8000f74:	481d      	ldr	r0, [pc, #116]	; (8000fec <display_trafficlight+0x164>)
 8000f76:	f000 fd82 	bl	8001a7e <HAL_GPIO_TogglePin>
				setTimer2(500);
 8000f7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f7e:	f000 f9e3 	bl	8001348 <setTimer2>
			}
		}
		else {
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, RESET);
		}
		break;
 8000f82:	e02c      	b.n	8000fde <display_trafficlight+0x156>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2108      	movs	r1, #8
 8000f88:	4818      	ldr	r0, [pc, #96]	; (8000fec <display_trafficlight+0x164>)
 8000f8a:	f000 fd60 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000f8e:	e026      	b.n	8000fde <display_trafficlight+0x156>
	case AUTO_YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_Pin | LED_GREEN_1_Pin | LED_YELLOW_1_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	216a      	movs	r1, #106	; 0x6a
 8000f94:	4815      	ldr	r0, [pc, #84]	; (8000fec <display_trafficlight+0x164>)
 8000f96:	f000 fd5a 	bl	8001a4e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin, RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4813      	ldr	r0, [pc, #76]	; (8000fec <display_trafficlight+0x164>)
 8000fa0:	f000 fd55 	bl	8001a4e <HAL_GPIO_WritePin>
		if (mode == 3) {
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <display_trafficlight+0x168>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d10c      	bne.n	8000fc6 <display_trafficlight+0x13e>
			if (timer2_flag == 1) {
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <display_trafficlight+0x16c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d116      	bne.n	8000fe2 <display_trafficlight+0x15a>
				HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_Pin);
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <display_trafficlight+0x164>)
 8000fb8:	f000 fd61 	bl	8001a7e <HAL_GPIO_TogglePin>
				setTimer2(500);
 8000fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fc0:	f000 f9c2 	bl	8001348 <setTimer2>
			}
		}
		else {
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, RESET);
		}
		break;
 8000fc4:	e00d      	b.n	8000fe2 <display_trafficlight+0x15a>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin, RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <display_trafficlight+0x164>)
 8000fcc:	f000 fd3f 	bl	8001a4e <HAL_GPIO_WritePin>
		break;
 8000fd0:	e007      	b.n	8000fe2 <display_trafficlight+0x15a>
	default:
		break;
 8000fd2:	bf00      	nop
 8000fd4:	e006      	b.n	8000fe4 <display_trafficlight+0x15c>
		break;
 8000fd6:	bf00      	nop
 8000fd8:	e004      	b.n	8000fe4 <display_trafficlight+0x15c>
		break;
 8000fda:	bf00      	nop
 8000fdc:	e002      	b.n	8000fe4 <display_trafficlight+0x15c>
		break;
 8000fde:	bf00      	nop
 8000fe0:	e000      	b.n	8000fe4 <display_trafficlight+0x15c>
		break;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	2000007c 	.word	0x2000007c
 8000ff4:	200000e0 	.word	0x200000e0

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 fa24 	bl	8001448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f818 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 f89e 	bl	8001144 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001008:	f000 f850 	bl	80010ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <main+0x30>)
 800100e:	f001 f987 	bl	8002320 <HAL_TIM_Base_Start_IT>
  status = INIT;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <main+0x34>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  mode = 1;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <main+0x38>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 800101e:	f7ff f9c7 	bl	80003b0 <fsm_automatic_run>
	  fsm_manual_run();
 8001022:	f7ff fa69 	bl	80004f8 <fsm_manual_run>
	  fsm_automatic_run();
 8001026:	e7fa      	b.n	800101e <main+0x26>
 8001028:	2000008c 	.word	0x2000008c
 800102c:	20000078 	.word	0x20000078
 8001030:	2000007c 	.word	0x2000007c

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fd24 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fd20 	bl	8001ab0 <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001076:	f000 f8c9 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f000 ff8e 	bl	8001fb4 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800109e:	f000 f8b5 	bl	800120c <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3740      	adds	r7, #64	; 0x40
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM2_Init+0x94>)
 80010ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM2_Init+0x94>)
 80010d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_TIM2_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM2_Init+0x94>)
 80010e0:	220a      	movs	r2, #10
 80010e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM2_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM2_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <MX_TIM2_Init+0x94>)
 80010f2:	f001 f8c5 	bl	8002280 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010fc:	f000 f886 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM2_Init+0x94>)
 800110e:	f001 fa5b 	bl	80025c8 <HAL_TIM_ConfigClockSource>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 f878 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM2_Init+0x94>)
 800112a:	f001 fc23 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f86a 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000008c 	.word	0x2000008c

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_GPIO_Init+0xbc>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <MX_GPIO_Init+0xbc>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_GPIO_Init+0xbc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_GPIO_Init+0xbc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <MX_GPIO_Init+0xbc>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_GPIO_Init+0xbc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_M_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 8001188:	2200      	movs	r2, #0
 800118a:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 800118e:	481d      	ldr	r0, [pc, #116]	; (8001204 <MX_GPIO_Init+0xc0>)
 8001190:	f000 fc5d 	bl	8001a4e <HAL_GPIO_WritePin>
                          |LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|SEG1_M_Pin
                          |SEG2_M_Pin|SEG3_M_Pin|SEG4_M_Pin|SEG5_M_Pin
                          |SEG6_M_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG31_Pin
 8001194:	2200      	movs	r2, #0
 8001196:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <MX_GPIO_Init+0xc4>)
 800119c:	f000 fc57 	bl	8001a4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_M_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin SEG1_M_Pin
                           SEG2_M_Pin SEG3_M_Pin SEG4_M_Pin SEG5_M_Pin
                           SEG6_M_Pin */
  GPIO_InitStruct.Pin = SEG0_M_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
 80011a0:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80011a4:	60bb      	str	r3, [r7, #8]
                          |LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|SEG1_M_Pin
                          |SEG2_M_Pin|SEG3_M_Pin|SEG4_M_Pin|SEG5_M_Pin
                          |SEG6_M_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2302      	movs	r3, #2
 80011b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <MX_GPIO_Init+0xc0>)
 80011ba:	f000 fab5 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80011be:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_GPIO_Init+0xc0>)
 80011d4:	f000 faa8 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG31_Pin
                           SEG41_Pin SEG51_Pin SEG61_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG01_Pin
                           SEG11_Pin SEG21_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG31_Pin
 80011d8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011dc:	60bb      	str	r3, [r7, #8]
                          |SEG41_Pin|SEG51_Pin|SEG61_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG01_Pin
                          |SEG11_Pin|SEG21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2302      	movs	r3, #2
 80011e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_GPIO_Init+0xc4>)
 80011f2:	f000 fa99 	bl	8001728 <HAL_GPIO_Init>

}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40010800 	.word	0x40010800
 8001208:	40010c00 	.word	0x40010c00

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_MspInit+0x40>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_MspInit+0x40>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_MspInit+0x40>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_MspInit+0x40>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_MspInit+0x40>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_MspInit+0x40>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126c:	d113      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	61d3      	str	r3, [r2, #28]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_TIM_Base_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	201c      	movs	r0, #28
 800128c:	f000 fa15 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001290:	201c      	movs	r0, #28
 8001292:	f000 fa2e 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ea:	f000 f8f3 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM2_IRQHandler+0x10>)
 80012fa:	f001 f85d 	bl	80023b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000008c 	.word	0x2000008c

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <setTimer1>:
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int tick = 10;

void setTimer1 (int duration) {
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/tick;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <setTimer1+0x28>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	fb92 f3f3 	sdiv	r3, r2, r3
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <setTimer1+0x2c>)
 8001328:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <setTimer1+0x30>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000044 	.word	0x20000044
 8001340:	200000d4 	.word	0x200000d4
 8001344:	200000d8 	.word	0x200000d8

08001348 <setTimer2>:

void setTimer2 (int duration) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/tick;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <setTimer2+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	fb92 f3f3 	sdiv	r3, r2, r3
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <setTimer2+0x2c>)
 800135c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <setTimer2+0x30>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000044 	.word	0x20000044
 8001374:	200000dc 	.word	0x200000dc
 8001378:	200000e0 	.word	0x200000e0

0800137c <timerRun>:
void clearTimer1() {
	timer1_counter = 0;
	timer1_flag = 0;
}

void timerRun (){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <timerRun+0x4c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd0b      	ble.n	80013a0 <timerRun+0x24>
		timer1_counter--;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <timerRun+0x4c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <timerRun+0x4c>)
 8001390:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <timerRun+0x4c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dc02      	bgt.n	80013a0 <timerRun+0x24>
			timer1_flag  = 1;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <timerRun+0x50>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0) {
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <timerRun+0x54>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dd0b      	ble.n	80013c0 <timerRun+0x44>
		timer2_counter--;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <timerRun+0x54>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <timerRun+0x54>)
 80013b0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <timerRun+0x54>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	dc02      	bgt.n	80013c0 <timerRun+0x44>
			timer2_flag  = 1;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <timerRun+0x58>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	200000d4 	.word	0x200000d4
 80013cc:	200000d8 	.word	0x200000d8
 80013d0:	200000dc 	.word	0x200000dc
 80013d4:	200000e0 	.word	0x200000e0

080013d8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 ) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
		//button_reading() ;
		getKeyInput();
 80013ea:	f7fe fed9 	bl	80001a0 <getKeyInput>
	}
	timerRun();
 80013ee:	f7ff ffc5 	bl	800137c <timerRun>

}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001414:	4c0a      	ldr	r4, [pc, #40]	; (8001440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001422:	f7ff ff71 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001426:	f001 fb0f 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142a:	f7ff fde5 	bl	8000ff8 <main>
  bx lr
 800142e:	4770      	bx	lr
  ldr r0, =_sdata
 8001430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001434:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001438:	08002ae0 	.word	0x08002ae0
  ldr r2, =_sbss
 800143c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001440:	200000e8 	.word	0x200000e8

08001444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001444:	e7fe      	b.n	8001444 <ADC1_2_IRQHandler>
	...

08001448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_Init+0x28>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x28>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f923 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145e:	200f      	movs	r0, #15
 8001460:	f000 f808 	bl	8001474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001464:	f7ff fed8 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x54>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x58>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f93b 	bl	800170e <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00e      	b.n	80014c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b0f      	cmp	r3, #15
 80014a6:	d80a      	bhi.n	80014be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a8:	2200      	movs	r2, #0
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f000 f903 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_InitTick+0x5c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000040 	.word	0x20000040
 80014cc:	2000004c 	.word	0x2000004c
 80014d0:	20000048 	.word	0x20000048

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_IncTick+0x1c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x20>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_IncTick+0x20>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	2000004c 	.word	0x2000004c
 80014f4:	200000e4 	.word	0x200000e4

080014f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b02      	ldr	r3, [pc, #8]	; (8001508 <HAL_GetTick+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	200000e4 	.word	0x200000e4

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4906      	ldr	r1, [pc, #24]	; (80015a4 <__NVIC_EnableIRQ+0x34>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff90 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff2d 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff42 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff35 	bl	8001570 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b08b      	sub	sp, #44	; 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e161      	b.n	8001a00 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800173c:	2201      	movs	r2, #1
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8150 	bne.w	80019fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a97      	ldr	r2, [pc, #604]	; (80019bc <HAL_GPIO_Init+0x294>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d05e      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001764:	4a95      	ldr	r2, [pc, #596]	; (80019bc <HAL_GPIO_Init+0x294>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d875      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800176a:	4a95      	ldr	r2, [pc, #596]	; (80019c0 <HAL_GPIO_Init+0x298>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d058      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001770:	4a93      	ldr	r2, [pc, #588]	; (80019c0 <HAL_GPIO_Init+0x298>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d86f      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001776:	4a93      	ldr	r2, [pc, #588]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d052      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 800177c:	4a91      	ldr	r2, [pc, #580]	; (80019c4 <HAL_GPIO_Init+0x29c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d869      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 8001782:	4a91      	ldr	r2, [pc, #580]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04c      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001788:	4a8f      	ldr	r2, [pc, #572]	; (80019c8 <HAL_GPIO_Init+0x2a0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d863      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800178e:	4a8f      	ldr	r2, [pc, #572]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d046      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
 8001794:	4a8d      	ldr	r2, [pc, #564]	; (80019cc <HAL_GPIO_Init+0x2a4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d85d      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d82a      	bhi.n	80017f4 <HAL_GPIO_Init+0xcc>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d859      	bhi.n	8001856 <HAL_GPIO_Init+0x12e>
 80017a2:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <HAL_GPIO_Init+0x80>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	08001823 	.word	0x08001823
 80017ac:	080017fd 	.word	0x080017fd
 80017b0:	0800180f 	.word	0x0800180f
 80017b4:	08001851 	.word	0x08001851
 80017b8:	08001857 	.word	0x08001857
 80017bc:	08001857 	.word	0x08001857
 80017c0:	08001857 	.word	0x08001857
 80017c4:	08001857 	.word	0x08001857
 80017c8:	08001857 	.word	0x08001857
 80017cc:	08001857 	.word	0x08001857
 80017d0:	08001857 	.word	0x08001857
 80017d4:	08001857 	.word	0x08001857
 80017d8:	08001857 	.word	0x08001857
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001857 	.word	0x08001857
 80017e4:	08001857 	.word	0x08001857
 80017e8:	08001857 	.word	0x08001857
 80017ec:	08001805 	.word	0x08001805
 80017f0:	08001819 	.word	0x08001819
 80017f4:	4a76      	ldr	r2, [pc, #472]	; (80019d0 <HAL_GPIO_Init+0x2a8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fa:	e02c      	b.n	8001856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e029      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e024      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e01f      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e01a      	b.n	8001858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182a:	2304      	movs	r3, #4
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e013      	b.n	8001858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	611a      	str	r2, [r3, #16]
          break;
 8001842:	e009      	b.n	8001858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	615a      	str	r2, [r3, #20]
          break;
 800184e:	e003      	b.n	8001858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x130>
          break;
 8001856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2bff      	cmp	r3, #255	; 0xff
 800185c:	d801      	bhi.n	8001862 <HAL_GPIO_Init+0x13a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_Init+0x13e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3304      	adds	r3, #4
 8001866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2bff      	cmp	r3, #255	; 0xff
 800186c:	d802      	bhi.n	8001874 <HAL_GPIO_Init+0x14c>
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x152>
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	3b08      	subs	r3, #8
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	210f      	movs	r1, #15
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	6a39      	ldr	r1, [r7, #32]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80a9 	beq.w	80019fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a8:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_GPIO_Init+0x2ac>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <HAL_GPIO_Init+0x2b4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00d      	beq.n	8001908 <HAL_GPIO_Init+0x1e0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_GPIO_Init+0x2b8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <HAL_GPIO_Init+0x1dc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_GPIO_Init+0x2bc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_GPIO_Init+0x1d8>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e004      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001900:	2303      	movs	r3, #3
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_GPIO_Init+0x1e2>
 8001908:	2300      	movs	r3, #0
 800190a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800191a:	492f      	ldr	r1, [pc, #188]	; (80019d8 <HAL_GPIO_Init+0x2b0>)
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001934:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	492b      	ldr	r1, [pc, #172]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	43db      	mvns	r3, r3
 800194a:	4927      	ldr	r1, [pc, #156]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800194c:	4013      	ands	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4921      	ldr	r1, [pc, #132]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	43db      	mvns	r3, r3
 8001972:	491d      	ldr	r1, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001974:	4013      	ands	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d006      	beq.n	8001992 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4917      	ldr	r1, [pc, #92]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	43db      	mvns	r3, r3
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 800199c:	4013      	ands	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01f      	beq.n	80019ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	490d      	ldr	r1, [pc, #52]	; (80019e8 <HAL_GPIO_Init+0x2c0>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e01f      	b.n	80019fa <HAL_GPIO_Init+0x2d2>
 80019ba:	bf00      	nop
 80019bc:	10320000 	.word	0x10320000
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10220000 	.word	0x10220000
 80019c8:	10210000 	.word	0x10210000
 80019cc:	10120000 	.word	0x10120000
 80019d0:	10110000 	.word	0x10110000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010000 	.word	0x40010000
 80019dc:	40010800 	.word	0x40010800
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40011000 	.word	0x40011000
 80019e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4909      	ldr	r1, [pc, #36]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae96 	bne.w	800173c <HAL_GPIO_Init+0x14>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	372c      	adds	r7, #44	; 0x2c
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e001      	b.n	8001a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a5e:	787b      	ldrb	r3, [r7, #1]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a64:	887a      	ldrh	r2, [r7, #2]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a6a:	e003      	b.n	8001a74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	041a      	lsls	r2, r3, #16
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	611a      	str	r2, [r3, #16]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	460b      	mov	r3, r1
 8001a88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a90:	887a      	ldrh	r2, [r7, #2]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	041a      	lsls	r2, r3, #16
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	400b      	ands	r3, r1
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e272      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8087 	beq.w	8001bde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d00c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001adc:	4b8f      	ldr	r3, [pc, #572]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d112      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
 8001ae8:	4b8c      	ldr	r3, [pc, #560]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af4:	d10b      	bne.n	8001b0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af6:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d06c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x12c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d168      	bne.n	8001bdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e24c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x76>
 8001b18:	4b80      	ldr	r3, [pc, #512]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7f      	ldr	r2, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e02e      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x98>
 8001b2e:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a77      	ldr	r2, [pc, #476]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0xbc>
 8001b52:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a71      	ldr	r2, [pc, #452]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a6e      	ldr	r2, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xd4>
 8001b6c:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a67      	ldr	r2, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fcb4 	bl	80014f8 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fcb0 	bl	80014f8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e200      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xe4>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fca0 	bl	80014f8 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fc9c 	bl	80014f8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1ec      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x10c>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d063      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d11c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d116      	bne.n	8001c3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1c0      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4939      	ldr	r1, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3a:	e03a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fc55 	bl	80014f8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff fc51 	bl	80014f8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1a1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_RCC_OscConfig+0x270>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fc34 	bl	80014f8 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c94:	f7ff fc30 	bl	80014f8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e180      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d03a      	beq.n	8001d34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fc14 	bl	80014f8 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fc10 	bl	80014f8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e160      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f000 faa6 	bl	8002244 <RCC_Delay>
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff fbfa 	bl	80014f8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	e00f      	b.n	8001d28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7ff fbf6 	bl	80014f8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d908      	bls.n	8001d28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e146      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	42420000 	.word	0x42420000
 8001d24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e9      	bne.n	8001d08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a6 	beq.w	8001e8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d46:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b88      	ldr	r3, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a87      	ldr	r2, [pc, #540]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b7f      	ldr	r3, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7e      	ldr	r2, [pc, #504]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fbb7 	bl	80014f8 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff fbb3 	bl	80014f8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e103      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x4c8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x312>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e02d      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x334>
 8001dca:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	e01c      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d10c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x356>
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0304 	orr.w	r3, r3, #4
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b5e      	ldr	r3, [pc, #376]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a5d      	ldr	r2, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e00b      	b.n	8001e1e <HAL_RCC_OscConfig+0x36e>
 8001e06:	4b5b      	ldr	r3, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	f023 0304 	bic.w	r3, r3, #4
 8001e1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb67 	bl	80014f8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fb63 	bl	80014f8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0b1      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCC_OscConfig+0x37e>
 8001e50:	e014      	b.n	8001e7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fb51 	bl	80014f8 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	e00a      	b.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff fb4d 	bl	80014f8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e09b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ee      	bne.n	8001e5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d061      	beq.n	8001f68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d146      	bne.n	8001f3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fb21 	bl	80014f8 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff fb1d 	bl	80014f8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e06d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4921      	ldr	r1, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a19      	ldr	r1, [r3, #32]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	430b      	orrs	r3, r1
 8001f06:	491b      	ldr	r1, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff faf1 	bl	80014f8 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff faed 	bl	80014f8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e03d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x46a>
 8001f38:	e035      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_RCC_OscConfig+0x4cc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fada 	bl	80014f8 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff fad6 	bl	80014f8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e026      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x498>
 8001f66:	e01e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e019      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x500>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0d0      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d910      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4965      	ldr	r1, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d040      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d115      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e073      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e06b      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4936      	ldr	r1, [pc, #216]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff fa28 	bl	80014f8 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff fa24 	bl	80014f8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e053      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d210      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4922      	ldr	r1, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1cc>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f986 	bl	8001474 <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000
 8002178:	40021000 	.word	0x40021000
 800217c:	08002ac8 	.word	0x08002ac8
 8002180:	20000040 	.word	0x20000040
 8002184:	20000048 	.word	0x20000048

08002188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b490      	push	{r4, r7}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_RCC_GetSysClockFreq+0xac>)
 8002190:	1d3c      	adds	r4, r7, #4
 8002192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002198:	f240 2301 	movw	r3, #513	; 0x201
 800219c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x40>
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x46>
 80021c6:	e02b      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ca:	623b      	str	r3, [r7, #32]
      break;
 80021cc:	e02b      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	0c9b      	lsrs	r3, r3, #18
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3328      	adds	r3, #40	; 0x28
 80021d8:	443b      	add	r3, r7
 80021da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d012      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	0c5b      	lsrs	r3, r3, #17
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	3328      	adds	r3, #40	; 0x28
 80021f6:	443b      	add	r3, r7
 80021f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	e004      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	623b      	str	r3, [r7, #32]
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	6a3b      	ldr	r3, [r7, #32]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc90      	pop	{r4, r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	08002ab8 	.word	0x08002ab8
 8002238:	40021000 	.word	0x40021000
 800223c:	007a1200 	.word	0x007a1200
 8002240:	003d0900 	.word	0x003d0900

08002244 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <RCC_Delay+0x34>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <RCC_Delay+0x38>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0a5b      	lsrs	r3, r3, #9
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002260:	bf00      	nop
  }
  while (Delay --);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	60fa      	str	r2, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f9      	bne.n	8002260 <RCC_Delay+0x1c>
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000040 	.word	0x20000040
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e041      	b.n	8002316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe ffd8 	bl	800125c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f000 fa6a 	bl	8002798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d001      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e035      	b.n	80023a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x4e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	d004      	beq.n	800236e <HAL_TIM_Base_Start_IT+0x4e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_TIM_Base_Start_IT+0x94>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d111      	bne.n	8002392 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d010      	beq.n	80023a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002390:	e007      	b.n	80023a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40000400 	.word	0x40000400

080023b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0202 	mvn.w	r2, #2
 80023e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9b1 	bl	8002762 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f9a4 	bl	8002750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f9b3 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0204 	mvn.w	r2, #4
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f987 	bl	8002762 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f97a 	bl	8002750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f989 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d122      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b08      	cmp	r3, #8
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0208 	mvn.w	r2, #8
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f95d 	bl	8002762 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f950 	bl	8002750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f95f 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d122      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f933 	bl	8002762 <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f926 	bl	8002750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f935 	bl	8002774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0201 	mvn.w	r2, #1
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe ff4e 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa67 	bl	8002a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	d10e      	bne.n	8002594 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d107      	bne.n	8002594 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8f9 	bl	8002786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d10e      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d107      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0220 	mvn.w	r2, #32
 80025b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa32 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_TIM_ConfigClockSource+0x18>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0b3      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x180>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002606:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002618:	d03e      	beq.n	8002698 <HAL_TIM_ConfigClockSource+0xd0>
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	f200 8087 	bhi.w	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	f000 8085 	beq.w	8002734 <HAL_TIM_ConfigClockSource+0x16c>
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262e:	d87f      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d01a      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xa2>
 8002634:	2b70      	cmp	r3, #112	; 0x70
 8002636:	d87b      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002638:	2b60      	cmp	r3, #96	; 0x60
 800263a:	d050      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x116>
 800263c:	2b60      	cmp	r3, #96	; 0x60
 800263e:	d877      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002640:	2b50      	cmp	r3, #80	; 0x50
 8002642:	d03c      	beq.n	80026be <HAL_TIM_ConfigClockSource+0xf6>
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d873      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002648:	2b40      	cmp	r3, #64	; 0x40
 800264a:	d058      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x136>
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d86f      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002650:	2b30      	cmp	r3, #48	; 0x30
 8002652:	d064      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x156>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d86b      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002658:	2b20      	cmp	r3, #32
 800265a:	d060      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x156>
 800265c:	2b20      	cmp	r3, #32
 800265e:	d867      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05c      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x156>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d05a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002668:	e062      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f000 f95c 	bl	8002936 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800268c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	609a      	str	r2, [r3, #8]
      break;
 8002696:	e04e      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f000 f945 	bl	8002936 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ba:	609a      	str	r2, [r3, #8]
      break;
 80026bc:	e03b      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f000 f8bc 	bl	8002848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2150      	movs	r1, #80	; 0x50
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f913 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 80026dc:	e02b      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 f8da 	bl	80028a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2160      	movs	r1, #96	; 0x60
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f903 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e01b      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f000 f89c 	bl	8002848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2140      	movs	r1, #64	; 0x40
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f8f3 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 800271c:	e00b      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f000 f8ea 	bl	8002902 <TIM_ITRx_SetConfig>
        break;
 800272e:	e002      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002730:	bf00      	nop
 8002732:	e000      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002734:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <TIM_Base_SetConfig+0xa8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_Base_SetConfig+0x28>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b6:	d003      	beq.n	80027c0 <TIM_Base_SetConfig+0x28>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a22      	ldr	r2, [pc, #136]	; (8002844 <TIM_Base_SetConfig+0xac>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d108      	bne.n	80027d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <TIM_Base_SetConfig+0xa8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <TIM_Base_SetConfig+0x52>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0x52>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <TIM_Base_SetConfig+0xac>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d108      	bne.n	80027fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <TIM_Base_SetConfig+0xa8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400

08002848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f023 030a 	bic.w	r3, r3, #10
 8002884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f023 0210 	bic.w	r2, r3, #16
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	031b      	lsls	r3, r3, #12
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	f043 0307 	orr.w	r3, r3, #7
 8002924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002950:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	609a      	str	r2, [r3, #8]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002988:	2302      	movs	r3, #2
 800298a:	e041      	b.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d004      	beq.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	4d0c      	ldr	r5, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	f000 f822 	bl	8002aa0 <_init>
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	4d0a      	ldr	r5, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08002ad8 	.word	0x08002ad8
 8002a84:	08002ad8 	.word	0x08002ad8
 8002a88:	08002ad8 	.word	0x08002ad8
 8002a8c:	08002adc 	.word	0x08002adc

08002a90 <memset>:
 8002a90:	4603      	mov	r3, r0
 8002a92:	4402      	add	r2, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
