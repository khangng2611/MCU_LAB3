/*
 * input_processing.c
 *
 *  Created on: Oct 24, 2022
 *      Author: HP
 */
# define NO_OF_BUTTONS 3

#include "main.h"
#include "input_reading.h"
#include "led_display.h"

enum ButtonState { BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[NO_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED} ;

int MODE = 1;
int VALUE = 1;


void fsm_for_input_processing (void) {
	for (int i = 0; i < NO_OF_BUTTONS; i ++) {
		switch ( buttonState[i] ) {
		case BUTTON_RELEASED :
			if( is_button_pressed(i) ) {
				buttonState[i] = BUTTON_PRESSED ;
				// INCREASE VALUE OF PORT A BY ONE UNIT
			}
			break ;
		case BUTTON_PRESSED :
			if (!is_button_pressed(i) ) {
				buttonState[i] = BUTTON_RELEASED ;
			} else {
				if( is_button_pressed_1s(0) ) {
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
				}
			}
			break ;
		case BUTTON_PRESSED_MORE_THAN_1_SECOND :
			if (!is_button_pressed(i) ) {
				buttonState[i] = BUTTON_RELEASED ;
			}
			// todo
			break ;
		}
	}

	switch (buttonState[0]) {
	case BUTTON_PRESSED:
	    if (MODE == 4) MODE = 1;
	    else MODE ++;
	    VALUE = 0;
	    break;
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (MODE == 4) MODE = 1;
		else MODE ++;
		VALUE = 0;
		break;
	case BUTTON_RELEASED:
		break;
	}

	switch (buttonState[1]) {
	case BUTTON_PRESSED:
	    if (VALUE >= 99) VALUE = 1;
	    else VALUE ++;
	    break;
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (VALUE >= 99) VALUE = 1;
		else VALUE ++;
		break;
	case BUTTON_RELEASED:
		break;
	}
	if (MODE == 1) {
		runtrafficlight(1,0);
	}
	else {
		switch (buttonState[2]) {
		case BUTTON_PRESSED:
			runtrafficlight(MODE, VALUE);
			break;
		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			break;
		case BUTTON_RELEASED:
			break;
		}
	}
}
