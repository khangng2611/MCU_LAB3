/*
 * input_processing.c
 *
 *  Created on: Oct 24, 2022
 *      Author: HP
 */
# define NO_OF_BUTTONS 3

#include "main.h"
#include "input_reading.h"
enum ButtonState { BUTTON_RELEASED , BUTTON_PRESSED , BUTTON_PRESSED_MORE_THAN_1_SECOND } ;
enum ButtonState buttonState[NO_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED} ;

int MODE = 0;
int VALUE = 0;

void trafficlight (int green_time, int yellow_time, int red_time) {
	int traffic_ord1[3] = {green_time, yellow_time, red_time};
	int traffic_ord2[3] = {red_time, green_time, yellow_time};
	int time = green_time + yellow_time + red_time;
	int i1 = 0, i2 = 0; //bien de chay array
	int tem1 = traffic_ord1[i1], tem2 = traffic_ord2[i2]; //tgian current cua den1, den2
	if (time <= 0) {
		  time = 10; i1 = 0; i2 = 0;
		  tem1 = traffic_ord1[i1], tem2 = traffic_ord2[i2];
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
	}
	if (tem1 <= 0) { //het tgian cua 1 loai den
		  i1 ++;
		  tem1 = traffic_ord1[i1]; //gan tiep tgian cua den tiep theo
		  switch (i1) {  //neu i=1, chuyen tu xanh->vang; i=2, chuyen tu vang->do
		    case 1:
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
		  	    break;
		    case 2:
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
		  	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
		  	    break;
		   }
	}
	if (tem2 <= 0) { //het tgian cua 1 loai den, gan tiep tgian cua den tiep theo
		   i2 ++;
		   tem2 = traffic_ord2[i2]; //gan tiep tgian cua den tiep theo
		   switch (i2) { //neu i=1, chuyen tu xanh->vang; i=2, chuyen tu vang->do
		    	case 1:
		  	      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
		  	      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
		 	      	 break;
		    	case 2:
		  	      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
		  	      	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
		  	      	 break;
		    	}
	}
	display7SEG(tem1%10);
	display7SEG1(tem2%10);
	time--;
		    	  tem1--;
		    	  tem2--;

}


void runtrafficlight (int mode, int value) {
	switch (mode) {
		case 1:

			break;
		case 2:

			break;
		case 3:

			break;
		case 4:

			break;
		}

}

void fsm_for_input_processing (void) {
	for (int i = 0; i < NO_OF_BUTTONS; i ++) {
		switch ( buttonState[i] ) {
		case BUTTON_RELEASED :
			if( is_button_pressed(i) ) {
				buttonState[i] = BUTTON_PRESSED ;
				// INCREASE VALUE OF PORT A BY ONE UNIT
			}
			break ;
		case BUTTON_PRESSED :
			if (!is_button_pressed(i) ) {
				buttonState[i] = BUTTON_RELEASED ;
			} else {
				if( is_button_pressed_1s(0) ) {
					buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
				}
			}
			break ;
		case BUTTON_PRESSED_MORE_THAN_1_SECOND :
			if (!is_button_pressed(i) ) {
				buttonState[i] = BUTTON_RELEASED ;
			}
			// todo
			break ;
		}
	}

	switch (buttonState[0]) {
	case BUTTON_PRESSED:
	    if (MODE == 4) MODE = 1;
	    else MODE ++;
	    VALUE = 0;
	    break;
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (MODE == 4) MODE = 1;
		else MODE ++;
		VALUE = 0;
		break;
	case BUTTON_RELEASED:
		break;
	}

	switch (buttonState[1]) {
	case BUTTON_PRESSED:
	    if (VALUE >= 99) VALUE = 1;
	    else VALUE ++;
	    break;
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		if (VALUE >= 99) VALUE = 1;
		else VALUE ++;
		break;
	case BUTTON_RELEASED:
		break;
	}

	switch (buttonState[2]) {
	case BUTTON_PRESSED:
		runtrafficlight(MODE, VALUE);
		break;
	case BUTTON_PRESSED_MORE_THAN_1_SECOND:
		break;
	case BUTTON_RELEASED:
		break;
	}
}
